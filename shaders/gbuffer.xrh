////////////////////////////////////////////////////////////////////////////
//	Created		: 20.11.2022
//	Author		: Deathman, Mihan-323
//	Basic idea 	: xRay engine 2.0 sm 3.0
////////////////////////////////////////////////////////////////////////////
#include "common.xrh"
////////////////////////////////////////////////////////////////////////////
uniform sampler2D s_gbuffer_1;
uniform sampler2D s_gbuffer_2;
uniform sampler2D s_gbuffer_3;
uniform sampler2D s_zbuffer;
////////////////////////////////////////////////////////////////////////////
struct GBuffer
{
    float3 Albedo;
    float3 Position;
    float3 Normal;
    float Roughness;
    float Metallness;
    float AO;
    float SubSurfacePower;
    float EmissionPower;
};

struct GBufferPacked
{
    float4 rt_GBuffer_1 : COLOR0;
    float4 rt_GBuffer_2 : COLOR1;
    float4 rt_ZBuffer : COLOR2;
#ifndef DISABLE_SHADING
    float4 rt_GBuffer_3 : COLOR3;
#endif
};
////////////////////////////////////////////////////////////////////////////
float2 PackNormal(float3 norm)
{
   float2 res;
   res = 0.5 * (norm.xy + float2(1, 1));
   res.x *= (norm.z < 0 ? -1.0 : 1.0);
   res.x = res.x * 0.5 + 0.5;
   return res;
}

float3 UnpackNormal(float2 norm)
{
   float3 res;
   norm.x = norm.x * 2.0 - 1.0;
   res.xy = (2.0 * abs(norm)) - float2(1,1);
   res.z = (norm.x < 0 ? -1.0 : 1.0) * sqrt(abs(1 - res.x*res.x - res.y*res.y));
   return res;
}

float PackPosition(float3 position)
{
   return position.z;
}

float3 UnpackPosition(float Depth, float2 TexCoords)
{
    float3 Pos;
    Pos.z = Depth;
    Pos.xy = Pos.z * (TexCoords * 2.0f * pos_decompression_params.xy - pos_decompression_params.xy);
    return Pos;
}

float3 UnpackPositionWithPos2D(float Depth, float2 Pos2D)
{
    Pos2D += 0.5f;
    float3 Pos = NULL;
    Pos.z = Depth;
    Pos.xy = Pos.z * (Pos2D * pos_decompression_params.zw - pos_decompression_params.xy);
    return Pos;
}
////////////////////////////////////////////////////////////////////////////
float CheckDepth(float Depth)
{
    return Depth < 0.0001f ? 250.0f : Depth;
}

float GetDepth(float2 TexCoords)
{
    float Depth = tex2Dlod0(s_zbuffer, TexCoords).r;
    return CheckDepth(Depth);
}

float GetDepthRaw(float2 TexCoords)
{
    return tex2Dlod0(s_zbuffer, TexCoords).r;
}

float3 GetPosition(float2 TexCoords)
{
    return UnpackPosition(GetDepth(TexCoords), TexCoords);
}

float3 GetNormal(float2 TexCoords)
{
    return UnpackNormal(tex2Dlod0(s_gbuffer_2, TexCoords).rg);
}

void GetPositionAndNormal(in float2 TexCoords, inout float3 Position, inout float3 Normal)
{
    Position = GetPosition(TexCoords);
    Normal = GetNormal(TexCoords);
}

float GetSceneRoughness(float2 TexCoords)
{
    return tex2Dlod0(s_gbuffer_1, TexCoords).a;
}
////////////////////////////////////////////////////////////////////////////
GBufferPacked PackGBuffer(GBuffer Input)
{
    GBufferPacked GBuffer;

    GBuffer.rt_GBuffer_1 = float4(Input.Albedo, Input.Roughness);
    GBuffer.rt_GBuffer_2 = float4(PackNormal(Input.Normal), Input.AO, Input.EmissionPower);
    GBuffer.rt_ZBuffer = float4(PackPosition(Input.Position), NULL, NULL, NULL);
    
#ifndef DISABLE_SHADING
    GBuffer.rt_GBuffer_3 = float4(Input.SubSurfacePower, Input.Metallness, NULL, NULL);
#endif
    
    return GBuffer;
}

GBuffer UnpackGBuffer(float2 TexCoords)
{
    GBuffer GBuffer;

	float4 GBuffer_1 = tex2Dlod0(s_gbuffer_1, TexCoords);
    float4 GBuffer_2 = tex2Dlod0(s_gbuffer_2, TexCoords);
    float ZBuffer = tex2Dlod0(s_zbuffer, TexCoords).r;
    
    GBuffer.Albedo = GBuffer_1.rgb;
    GBuffer.Roughness = GBuffer_1.a;
    GBuffer.Normal = UnpackNormal(GBuffer_2.rg);
    GBuffer.AO = GBuffer_2.b;
    GBuffer.EmissionPower = GBuffer_2.a;
    GBuffer.Position = UnpackPosition(CheckDepth(ZBuffer), TexCoords);
    
#ifndef DISABLE_SHADING
    float4 GBuffer_3 = tex2Dlod0(s_gbuffer_3, TexCoords);
    GBuffer.SubSurfacePower = GBuffer_3.r;
    GBuffer.Metallness = GBuffer_3.g;
#else
    GBuffer.SubSurfacePower = 0.0f;
    GBuffer.Metallness = 0.0f;
#endif
    
    return GBuffer;
}
////////////////////////////////////////////////////////////////////////////
